/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.tables.records;


import edu.java.scrapper.domain.jooq.enums.ResourceType;
import edu.java.scrapper.domain.jooq.tables.Links;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LinksRecord extends UpdatableRecordImpl<LinksRecord> implements Record7<Long, String, OffsetDateTime, OffsetDateTime, ResourceType, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>LINKS.ID</code>.
     */
    public void setId(@Nullable Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>LINKS.ID</code>.
     */
    @Nullable
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>LINKS.URL</code>.
     */
    public void setUrl(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>LINKS.URL</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getUrl() {
        return (String) get(1);
    }

    /**
     * Setter for <code>LINKS.UPDATED_AT</code>.
     */
    public void setUpdatedAt(@Nullable OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>LINKS.UPDATED_AT</code>.
     */
    @Nullable
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>LINKS.LAST_CHECK</code>.
     */
    public void setLastCheck(@Nullable OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>LINKS.LAST_CHECK</code>.
     */
    @Nullable
    public OffsetDateTime getLastCheck() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>LINKS.RESOURCE_TYPE</code>.
     */
    public void setResourceType(@NotNull ResourceType value) {
        set(4, value);
    }

    /**
     * Getter for <code>LINKS.RESOURCE_TYPE</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public ResourceType getResourceType() {
        return (ResourceType) get(4);
    }

    /**
     * Setter for <code>LINKS.GITHUB_UPDATED_AT</code>.
     */
    public void setGithubUpdatedAt(@Nullable OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>LINKS.GITHUB_UPDATED_AT</code>.
     */
    @Nullable
    public OffsetDateTime getGithubUpdatedAt() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>LINKS.STACKOVERFLOW_LAST_EDIT_DATE_QUESTION</code>.
     */
    public void setStackoverflowLastEditDateQuestion(@Nullable OffsetDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>LINKS.STACKOVERFLOW_LAST_EDIT_DATE_QUESTION</code>.
     */
    @Nullable
    public OffsetDateTime getStackoverflowLastEditDateQuestion() {
        return (OffsetDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row7<Long, String, OffsetDateTime, OffsetDateTime, ResourceType, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row7<Long, String, OffsetDateTime, OffsetDateTime, ResourceType, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return Links.LINKS.ID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return Links.LINKS.URL;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field3() {
        return Links.LINKS.UPDATED_AT;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field4() {
        return Links.LINKS.LAST_CHECK;
    }

    @Override
    @NotNull
    public Field<ResourceType> field5() {
        return Links.LINKS.RESOURCE_TYPE;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field6() {
        return Links.LINKS.GITHUB_UPDATED_AT;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field7() {
        return Links.LINKS.STACKOVERFLOW_LAST_EDIT_DATE_QUESTION;
    }

    @Override
    @Nullable
    public Long component1() {
        return getId();
    }

    @Override
    @NotNull
    public String component2() {
        return getUrl();
    }

    @Override
    @Nullable
    public OffsetDateTime component3() {
        return getUpdatedAt();
    }

    @Override
    @Nullable
    public OffsetDateTime component4() {
        return getLastCheck();
    }

    @Override
    @NotNull
    public ResourceType component5() {
        return getResourceType();
    }

    @Override
    @Nullable
    public OffsetDateTime component6() {
        return getGithubUpdatedAt();
    }

    @Override
    @Nullable
    public OffsetDateTime component7() {
        return getStackoverflowLastEditDateQuestion();
    }

    @Override
    @Nullable
    public Long value1() {
        return getId();
    }

    @Override
    @NotNull
    public String value2() {
        return getUrl();
    }

    @Override
    @Nullable
    public OffsetDateTime value3() {
        return getUpdatedAt();
    }

    @Override
    @Nullable
    public OffsetDateTime value4() {
        return getLastCheck();
    }

    @Override
    @NotNull
    public ResourceType value5() {
        return getResourceType();
    }

    @Override
    @Nullable
    public OffsetDateTime value6() {
        return getGithubUpdatedAt();
    }

    @Override
    @Nullable
    public OffsetDateTime value7() {
        return getStackoverflowLastEditDateQuestion();
    }

    @Override
    @NotNull
    public LinksRecord value1(@Nullable Long value) {
        setId(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value2(@NotNull String value) {
        setUrl(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value3(@Nullable OffsetDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value4(@Nullable OffsetDateTime value) {
        setLastCheck(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value5(@NotNull ResourceType value) {
        setResourceType(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value6(@Nullable OffsetDateTime value) {
        setGithubUpdatedAt(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value7(@Nullable OffsetDateTime value) {
        setStackoverflowLastEditDateQuestion(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord values(@Nullable Long value1, @NotNull String value2, @Nullable OffsetDateTime value3, @Nullable OffsetDateTime value4, @NotNull ResourceType value5, @Nullable OffsetDateTime value6, @Nullable OffsetDateTime value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LinksRecord
     */
    public LinksRecord() {
        super(Links.LINKS);
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    @ConstructorProperties({ "id", "url", "updatedAt", "lastCheck", "resourceType", "githubUpdatedAt", "stackoverflowLastEditDateQuestion" })
    public LinksRecord(@Nullable Long id, @NotNull String url, @Nullable OffsetDateTime updatedAt, @Nullable OffsetDateTime lastCheck, @NotNull ResourceType resourceType, @Nullable OffsetDateTime githubUpdatedAt, @Nullable OffsetDateTime stackoverflowLastEditDateQuestion) {
        super(Links.LINKS);

        setId(id);
        setUrl(url);
        setUpdatedAt(updatedAt);
        setLastCheck(lastCheck);
        setResourceType(resourceType);
        setGithubUpdatedAt(githubUpdatedAt);
        setStackoverflowLastEditDateQuestion(stackoverflowLastEditDateQuestion);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    public LinksRecord(edu.java.scrapper.domain.jooq.tables.pojos.Links value) {
        super(Links.LINKS);

        if (value != null) {
            setId(value.getId());
            setUrl(value.getUrl());
            setUpdatedAt(value.getUpdatedAt());
            setLastCheck(value.getLastCheck());
            setResourceType(value.getResourceType());
            setGithubUpdatedAt(value.getGithubUpdatedAt());
            setStackoverflowLastEditDateQuestion(value.getStackoverflowLastEditDateQuestion());
            resetChangedOnNotNull();
        }
    }
}
