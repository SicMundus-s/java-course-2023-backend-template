appsrap:
  scheduler:
    enable: true
    interval: 10s
    force-check-delay: 10s
  base-url-client:
    github: "https://api.github.com"
    stackoverflow: "https://api.stackexchange.com/2.3"
    bot: "http://localhost:8090/v0/bot"
  database-access-type: jpa
  use-queue: true

kafka:
  bootstrap-servers: localhost:9092
  topic: Topic1

springdoc:
  swagger-ui:
    path: /swagger-ui.html

spring:
  application:
    name: scrapper
  metrics:
    tags:
      application: "${spring.application.name}"
  datasource:
    url: jdbc:postgresql://localhost:5432/scrapper
    username: postgres
    password: postgres
  liquibase:
    enabled: false
  cache:
    cache-names:
      - rate-limit-buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s

bucket4j:
  enabled: true
  filters:
    - filter-method: servlet
    - cache-name: ip-rate-limit
      url: /*
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      strategy: first
      rate-limits:
        - bandwidths:
            - capacity: 20
              time: 1
              unit: minutes

management:
  server:
    port: 8082
  endpoints:
    web:
      base-path: "/"
      exposure:
        include: [ "info", "health", "prometheus" ]
      path-mapping:
        prometheus: "metrics"


server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml
